diff --git a/node_modules/@onsol/tldparser/dist/cjs/name-record-handler.js b/node_modules/@onsol/tldparser/dist/cjs/name-record-handler.js
index 522651a..41d1792 100644
--- a/node_modules/@onsol/tldparser/dist/cjs/name-record-handler.js
+++ b/node_modules/@onsol/tldparser/dist/cjs/name-record-handler.js
@@ -65,7 +65,7 @@ const _getNameAccount = (name, parent) => __awaiter(void 0, void 0, void 0, func
     if (!parent) {
         parent = yield (0, _1.getOriginNameAccountKey)();
     }
-    let hashed = (0, _1.getHashedName)(name);
+    let hashed = yield (0, _1.getHashedName)(name);
     let [pubkey] = yield (0, _1.getNameAccountKeyWithBump)(hashed, undefined, parent);
     return { pubkey, hashed };
 });
diff --git a/node_modules/@onsol/tldparser/dist/cjs/parsers.js b/node_modules/@onsol/tldparser/dist/cjs/parsers.js
index 2ab99b3..7afa080 100644
--- a/node_modules/@onsol/tldparser/dist/cjs/parsers.js
+++ b/node_modules/@onsol/tldparser/dist/cjs/parsers.js
@@ -43,7 +43,7 @@ class TldParser {
         return __awaiter(this, void 0, void 0, function* () {
             const tldName = '.' + tld;
             const nameOriginTldKey = yield (0, utils_1.getOriginNameAccountKey)();
-            const parentHashedName = (0, utils_1.getHashedName)(tldName);
+            const parentHashedName = yield (0, utils_1.getHashedName)(tldName);
             const [parentAccountKey] = (0, utils_1.getNameAccountKeyWithBump)(parentHashedName, undefined, nameOriginTldKey);
             if (typeof userAccount == 'string') {
                 userAccount = new web3_js_1.PublicKey(userAccount);
diff --git a/node_modules/@onsol/tldparser/dist/cjs/utils.js b/node_modules/@onsol/tldparser/dist/cjs/utils.js
index 8f88e0d..3f8aee2 100644
--- a/node_modules/@onsol/tldparser/dist/cjs/utils.js
+++ b/node_modules/@onsol/tldparser/dist/cjs/utils.js
@@ -13,6 +13,7 @@ exports.findNameHouse = exports.findTldHouse = exports.findNftRecord = exports.g
 const web3_js_1 = require("@solana/web3.js");
 const bn_js_1 = require("bn.js");
 const crypto_1 = require("crypto");
+const expoCrypto = require("expo-crypto");
 const constants_1 = require("./constants");
 const name_record_header_1 = require("./state/name-record-header");
 const tag_1 = require("./types/tag");
@@ -58,9 +59,13 @@ exports.getNameOwner = getNameOwner;
  *
  * @param name any string or domain name.
  */
-function getHashedName(name) {
+async function getHashedName(name) {
     const input = name_record_header_1.NameRecordHeader.HASH_PREFIX + name;
-    const buffer = (0, crypto_1.createHash)('sha256').update(input, 'utf8').digest();
+    // const buffer = (0, crypto_1.createHash)('sha256').update(input, 'utf8').digest();
+    const buffer = await Crypto.digestStringAsync(
+      Crypto.CryptoDigestAlgorithm.SHA256,
+      Buffer.from(input, "hex").toString()
+    );
     return buffer;
 }
 exports.getHashedName = getHashedName;
