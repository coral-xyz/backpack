schema {
  mutation: Mutation
  query: Query
}

"""
Custom scalar to handle the parsing of arbitrary JSON object data.
"""
scalar JSONObject

"""
Definition of cache control directive for Apollo to leverage with the plugin.
"""
directive @cacheControl(
  maxAge: Int
  scope: CacheControlScope
  inheritMaxAge: Boolean
) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION

"""
Root level mutation type.
"""
type Mutation {
  """
  Authenticate a user and set the JWT in their cookies.
  """
  authenticate(
    chainId: ChainID!
    message: String!
    publicKey: String!
    signature: String!
  ): String!

  """
  Deauthenticate the current user and clear their JWT cookie.
  """
  deauthenticate: String!

  """
  Attempt to add a new wallet public key to the user account.
  """
  importPublicKey(
    chainId: ChainID!
    address: String!
    signature: String!
  ): Boolean
}

"""
Root level query type.
"""
type Query {
  """
  Fetch a user by their Backpack account username. The username is inferred by the
  presence of a valid and verified JWT.
  """
  user: User @cacheControl(maxAge: 60, scope: PRIVATE)

  """
  Fetching a wallet and it's assets by the public key address and associated `ChainID`.
  """
  wallet(chainId: ChainID!, address: String!): Wallet @cacheControl(maxAge: 60)
}

"""
Scope enum for cache control.
"""
enum CacheControlScope {
  PUBLIC
  PRIVATE
}

"""
Chain ID enum variants for the supported blockchains in the API.
"""
enum ChainID {
  ETHEREUM
  SOLANA
}

"""
Enum for associating a friend request with the direction of how it was sent.
"""
enum FriendRequestType {
  RECEIVED
  SENT
}

"""
Input filter type for fetching user wallet NFTs.
"""
input NftFiltersInput {
  """
  A list of mint or contract addresses to filter the response.
  """
  addresses: [String!]
}

"""
Input filter type for fetching user notifications.
"""
input NotificationsFiltersInput {
  """
  The limit for number of items desired in the response.
  """
  limit: Int

  """
  Flag to filter for only unread notifications of the user.
  """
  unreadOnly: Boolean
}

"""
Input filter type for fetching user wallets and their data.
"""
input WalletsFiltersInput {
  """
  A `ChainID` value to filter for all of the public keys of the user for a given blockchain.
  """
  chainId: ChainID

  """
  Flag to filter for only the primary wallets for each registered blockchain of the user.
  """
  primaryOnly: Boolean

  """
  A list of public keys to filter in the response.
  """
  pubkeys: [String!]
}

"""
Interface to enforce the implementation of an `id` field on a type.
"""
interface Node {
  """
  Globally unique identifier.
  """
  id: ID!
}

"""
Relay specification for a connection's page information.
"""
type PageInfo {
  """
  Flag to indicate if the connection has another page of edges.
  """
  hasNextPage: Boolean!

  """
  Flag to indicate if the connection has a previous page of edges.
  """
  hasPreviousPage: Boolean!

  """
  Cursor for the first edge in the page.
  """
  startCursor: String

  """
  Cursor for the last edge in the page.
  """
  endCursor: String
}

"""
Top-level type for providing wallet balance information.
Should provide details about native and non-native token balances with aggregation details.
"""
type Balances implements Node {
  """
  Globally unique identifier for a wallet's balances data.
  """
  id: ID!

  """
  The numerical value representing the aggregated market value of all fungible assets in the wallet.
  """
  aggregate: BalanceAggregate!

  """
  Token account balance and market data for the blockchain's native currency.
  """
  native: TokenBalance! @cacheControl(inheritMaxAge: true)

  """
  The Relay connection of token account balances and market data for non-native token types owned by the wallet.
  """
  tokens: TokenBalanceConnection @cacheControl(inheritMaxAge: true)
}

"""
The aggregate market balance data for all balances in a wallet.
"""
type BalanceAggregate implements Node {
  """
  Globally unique identifier for the balance aggregate.
  """
  id: ID!

  """
  The aggregate percentage of change.
  """
  percentChange: Float!

  """
  The aggregate USD value of all balance holdings.
  """
  value: Float!

  """
  The aggregate change in USD value.
  """
  valueChange: Float!
}

"""
`Nft` collection sub-type definition.
"""
type Collection implements Node {
  """
  Globally unique identifier for an NFT collection object.
  """
  id: ID!

  """
  The mint or contract address of the collection, presenting an NFT's parental entity.
  """
  address: String!

  """
  The image link for the collection or parental contract entity.
  """
  image: String

  """
  The name of the collection or parental contract entity.
  """
  name: String

  """
  Flag to indicate whether or not it has been verified by the relevant ecosystem standards.
  """
  verified: Boolean!
}

"""
Represents a friend reference for the parent `User`.
"""
type Friend implements Node {
  """
  Globally unique identifier for a friend of a user.
  """
  id: ID!

  """
  The image link for a friend's user avatar.
  """
  avatar: String!

  """
  The Backpack username of the friend.
  """
  username: String!
}

"""
Friend request data for a user.
"""
type FriendRequest implements Node {
  """
  Globally unique identifier for a single friend request entity.
  """
  id: ID!

  """
  The type of friend request to indicate whether it was sent or received by the user.
  """
  type: FriendRequestType!

  """
  The recipient or sending Backpack user ID of the request.
  """
  userId: String!
}

"""
Wrapper type for all user friendship data.
"""
type Friendship {
  """
  A list of Backpack friends of the user.
  """
  friends: [Friend!] @cacheControl(maxAge: 60, scope: PRIVATE)

  """
  A list of pending Backpack friend requests related to the user.
  """
  requests: [FriendRequest!] @cacheControl(maxAge: 60, scope: PRIVATE)
}

"""
NFT listing data pulling from marketplaces.
"""
type Listing implements Node {
  """
  Globally unique identifier for an NFT marketplace listing.
  """
  id: ID!

  """
  The display amount of the current listing price.
  """
  amount: String!

  """
  The marketplace or platform that the NFT is currently listing on.
  """
  source: String!

  """
  A link to the NFT's listing on the marketplace.
  """
  url: String!
}

"""
Coingecko and computed market and price data for a token.
"""
type MarketData implements Node {
  """
  Globally unqiue identifier for the token's market data.
  """
  id: ID!

  """
  A timestamp of the last date of when the market data was updated.
  """
  lastUpdatedAt: Int!

  """
  The image link to the logo of the token's market listing.
  """
  logo: String!

  """
  The percentage of change since the latest market data update.
  """
  percentChange: Float!

  """
  The current USD price of the token according to the market data.
  """
  price: Float!

  """
  The numerical amount change in USD since the latest market data update.
  """
  usdChange: Float!

  """
  The value of the wallet's currently holdings of the token in USD.
  """
  value: Float!

  """
  The value change in USD of the wallet's holdings of the token is USD.
  """
  valueChange: Float!
}

"""
Generic NFT object type definition to provide on-chain and off-chain metadata.
"""
type Nft implements Node {
  """
  Globally unique identifier for an NFT.
  """
  id: ID!

  """
  The mint or contract address of the item.
  """
  address: String!

  """
  The list of attributes or traits found in the item's metadata.
  """
  attributes: [NftAttribute!] @cacheControl(inheritMaxAge: true)

  """
  The collection or contract parental entity of the item.
  """
  collection: Collection @cacheControl(inheritMaxAge: true)

  """
  The description of the NFT found in the metadata.
  """
  description: String

  """
  The image link of the NFT found in the metadata.
  """
  image: String

  """
  Possible marketplace or platform listing data for the NFT for sale.
  """
  listing: Listing @cacheControl(maxAge: 60)

  """
  The link to the off-chain metadata.
  """
  metadataUri: String!

  """
  The name of the NFT found in the metadata.
  """
  name: String!

  """
  The owning wallet's public key.
  """
  owner: String!

  """
  The associated token account address or contract token ID of the individual item.
  """
  token: String!
}

"""
NFT `attributes` list sub-type definition.
"""
type NftAttribute {
  """
  The trait name of the attribute.
  """
  trait: String!

  """
  The item's value for the specified trait type.
  """
  value: String!
}

"""
Relay connection specification for `Nft` edges.
"""
type NftConnection {
  edges: [NftEdge]
  pageInfo: PageInfo!
}

"""
Relay edge specification for `Nft` nodes.
"""
type NftEdge {
  cursor: String!
  node: Nft
}

"""
Notification data type for user notification reads.
"""
type Notification implements Node {
  """
  Globally unique identifier for a specific notification.
  """
  id: ID!

  """
  Arbitrary body data of the notification parsed as an object.
  """
  body: JSONObject!

  """
  The emitting source of the notification.
  """
  source: String!

  """
  The timestamp that the notification was created.
  """
  timestamp: String!

  """
  The title of the notification.
  """
  title: String!

  """
  Flag to indicate whether it has been viewed or not by the user.
  """
  viewed: Boolean!
}

"""
Relay connection specification for `Notification` edges.
"""
type NotificationConnection {
  """
  The database integer ID of the last read notification of the user.
  """
  lastReadId: Int
  edges: [NotificationEdge]
  pageInfo: PageInfo!
}

"""
Relay edge specification for `Notification` nodes.
"""
type NotificationEdge {
  cursor: String!
  node: Notification
}

"""
Generic native or non-native token data and balance for a `Wallet`.
"""
type TokenBalance implements Node {
  """
  Globally unqiue identifier for the token balance object in a wallet.
  """
  id: ID!

  """
  The associated token account or wallet + contract address of the wallet.
  """
  address: String!

  """
  The unformated amount of tokens held for the specific contract or mint.
  """
  amount: String!

  """
  The number of decimals associated with the contract or mint.
  """
  decimals: Int!

  """
  The formatted display amount for the wallet's holdings of the token.
  """
  displayAmount: String!

  """
  Market price data for the token contract or mint.
  """
  marketData: MarketData @cacheControl(maxAge: 180)

  """
  The address of the token mint or contract.
  """
  mint: String!
}

"""
Relay connection specification for `TokenBalance` edges.
"""
type TokenBalanceConnection {
  edges: [TokenBalanceEdge]
  pageInfo: PageInfo!
}

"""
Relay edge specification for `TokenBalance` nodes.
"""
type TokenBalanceEdge {
  cursor: String!
  node: TokenBalance
}

"""
Generic on-chain transaction details structure.
"""
type Transaction implements Node {
  """
  Globally unique identifier for a single transaction.
  """
  id: ID!

  """
  The semantic description of the transaction effects.
  """
  description: String

  """
  The block number or slot that the transaction was committed to.
  """
  block: Float!

  """
  The amount in fees that were paid for processing the transaction.
  """
  fee: Int

  """
  The address of the wallet that paid the processing fees.
  """
  feePayer: String

  """
  The transaction hash or signature.
  """
  hash: String!

  """
  The source or program that is associated with the transaction.
  """
  source: String

  """
  The timestamp of the execution or commitment of the transaction.
  """
  timestamp: String

  """
  The category or type of transaction.
  """
  type: String!
}

"""
Relay connection specification for `Transaction` edges.
"""
type TransactionConnection {
  edges: [TransactionEdge]
  pageInfo: PageInfo!
}

"""
Relay edge specification for `Transaction` nodes.
"""
type TransactionEdge {
  cursor: String!
  node: Transaction
}

"""
Backpack user type definition so provide data about all of the user's
assets, peripheral information, and social data.
"""
type User implements Node {
  """
  Globally unique identifier for a Backpack user.
  """
  id: ID!

  """
  The image link for the avatar of the user.
  """
  avatar: String!

  """
  The timestamp of the creation of the user.
  """
  createdAt: String!

  """
  A grouping object of the friends and friend request data for the user.
  """
  friendship: Friendship @cacheControl(inheritMaxAge: true)

  """
  The Relay connection for the notifications received by the user.
  """
  notifications(filters: NotificationsFiltersInput): NotificationConnection
    @cacheControl(maxAge: 60, scope: PRIVATE)

  """
  The user's Backpack username.
  """
  username: String!

  """
  The Relay connection for the wallet's and their data that are registered to the user.
  """
  wallets(filters: WalletsFiltersInput): WalletConnection
    @cacheControl(maxAge: 60)
}

"""
Wallet definition to provide data about all assets owned by an address.
"""
type Wallet implements Node {
  """
  Globally unique identifier for a specific wallet on a blockchain.
  """
  id: ID!

  """
  The public key address of the wallet.
  """
  address: String!

  """
  The blockchain enum variant that the wallet is associated with.
  """
  chainId: ChainID!

  """
  The timestamp that the wallet was imported or registered to the Backpack user.
  """
  createdAt: String!

  """
  The detailed and aggregate balance data for the wallet.
  """
  balances: Balances @cacheControl(maxAge: 60)

  """
  Flag to indicate whether it is the user's primary wallet for the designated blockchain.
  """
  isPrimary: Boolean!

  """
  The Relay connection for all of the NFTs owned by the wallet.
  """
  nfts(filters: NftFiltersInput): NftConnection @cacheControl(maxAge: 60)

  """
  The Relay connection for all transactions initiated or associated with the wallet.
  """
  transactions(before: String, after: String): TransactionConnection
    @cacheControl(maxAge: 30)
}

"""
Relay connection specification for `Wallet` edges.
"""
type WalletConnection {
  edges: [WalletEdge]
  pageInfo: PageInfo!
}

"""
Relay edge specification for `Wallet` nodes.
"""
type WalletEdge {
  cursor: String!
  node: Wallet
}
